type INTERNAL_STATE = [288]

StateIsNotZero : INTERNAL_STATE -> Bit
StateIsNotZero state = (state != 0)

type State = 0

NextState: INTERNAL_STATE -> INTERNAL_STATE
NextState state = next_state
  where T1 = state@65 ^ state@92 ^ (state@90  && state@91) ^ state@170
        T2 = state@161 ^ state@176 ^ (state@174 && state@175) ^ state@263
        T3 = state@242 ^ state@287 ^ (state@285 && state@286) ^ state@68
        next_state = [T3, state@0, state@1, state@2, state@3, state@4, state@5, state@6, state@7, state@8, state@9, state@10, state@11, state@12, state@13, state@14, state@15, state@16, state@17, state@18, state@19, state@20, state@21, state@22, state@23, state@24, state@25, state@26, state@27, state@28, state@29, state@30, state@31, state@32, state@33, state@34, state@35, state@36, state@37, state@38, state@39, state@40, state@41, state@42, state@43, state@44, state@45, state@46, state@47, state@48, state@49, state@50, state@51, state@52, state@53, state@54, state@55, state@56, state@57, state@58, state@59, state@60, state@61, state@62, state@63, state@64, state@65, state@66, state@67, state@68, state@69, state@70, state@71, state@72, state@73, state@74, state@75, state@76, state@77, state@78, state@79, state@80, state@81, state@82, state@83, state@84, state@85, state@86, state@87, state@88, state@89, state@90, state@91, T1, state@93, state@94, state@95, state@96, state@97, state@98, state@99, state@100, state@101, state@102, state@103, state@104, state@105, state@106, state@107, state@108, state@109, state@110, state@111, state@112, state@113, state@114, state@115, state@116, state@117, state@118, state@119, state@120, state@121, state@122, state@123, state@124, state@125, state@126, state@127, state@128, state@129, state@130, state@131, state@132, state@133, state@134, state@135, state@136, state@137, state@138, state@139, state@140, state@141, state@142, state@143, state@144, state@145, state@146, state@147, state@148, state@149, state@150, state@151, state@152, state@153, state@154, state@155, state@156, state@157, state@158, state@159, state@160, state@161, state@162, state@163, state@164, state@165, state@166, state@167, state@168, state@169, state@170, state@171, state@172, state@173, state@174, state@175, T2, state@177, state@178, state@179, state@180, state@181, state@182, state@183, state@184, state@185, state@186, state@187, state@188, state@189, state@190, state@191, state@192, state@193, state@194, state@195, state@196, state@197, state@198, state@199, state@200, state@201, state@202, state@203, state@204, state@205, state@206, state@207, state@208, state@209, state@210, state@211, state@212, state@213, state@214, state@215, state@216, state@217, state@218, state@219, state@220, state@221, state@222, state@223, state@224, state@225, state@226, state@227, state@228, state@229, state@230, state@231, state@232, state@233, state@234, state@235, state@236, state@237, state@238, state@239, state@240, state@241, state@242, state@243, state@244, state@245, state@246, state@247, state@248, state@249, state@250, state@251, state@252, state@253, state@254, state@255, state@256, state@257, state@258, state@259, state@260, state@261, state@262, state@263, state@264, state@265, state@266, state@267, state@268, state@269, state@270, state@271, state@272, state@273, state@274, state@275, state@276, state@277, state@278, state@279, state@280, state@281, state@282, state@283, state@284, state@285, state@286]

DoIterations : INTERNAL_STATE -> INTERNAL_STATE
DoIterations input = output ! 0
  where iter = [0 .. 6] : [_][3]
        output = [input] # [ NextState(d) | i <- iter | d <- output ]

Init: [80] -> [80] -> [288]
Init key iv = last (take (iterate NextState first) : [1153][288])
    where first = (key # (0 :[13] ) # iv # (0 :[4]) # (0 :[108]) #(~0 :[3]))

DoIterationN : {n} (n<=2^^64) => INTERNAL_STATE -> INTERNAL_STATE      
DoIterationN input  = output ! 0
  where iter  =  take (iterate (\x -> x+1) 0 ) : [n][64]
        output = [input] # [ NextState(d) | i <- iter | d <- output ]

GetBit: [288] -> Bit
GetBit state = state@65 ^ state@92 ^ state@161 ^ state@176 ^ state@242 ^ state@287

Stream: {n} (n<=2^^64) => [288] -> ([n]Bit, [288])
Stream st =  ([GetBit State | State <- tail (take (iterate NextState st ) : [n+1][288])], last (take (iterate NextState st ) : [n+1][288]))

Encrypt: {n} (n<=2^^64) => [n]-> [288] -> ([n],[288])
Encrypt plaintext state = ([GetBit State | State <- tail (take (iterate NextState state ) : [n+1][288])] ^ plaintext, last (take (iterate NextState state ) : [n+1][288]))
   

Sq : {n} (n<=2^^64) => ([80],[80])-> INTERNAL_STATE     
Sq (key, iv) = DoIterationN`{n}(Init key iv)

//Własność: nie istnieje taka para: (key, IV), która dawałaby stan początkowy równy temu stanowi po n przejściach
SameState : {n} (n<=2^^64) =>([80],[80]) -> Bit
property SameState (key, iv) = Init key iv != Sq`{n}(key,iv) 

type x = 0
type y = 0

//Własność: nie istnieją takie różne wektory iv1,iv2, które dla jednego klucza dawałyby strumienie n-bitowe zawierające identyczne sekencje b bitów 
Cyclic : {n,b} (n<100, b<n) =>([80],[80],[80]) -> Bit
property Cyclic (key, iv1, iv2) =   (iv1 != iv2) ==>  ( [stre1 @@ [x..x+b] != stre2 @@ [y+x..x+y+b] | x<-[0..n-b] | y <- [0..n-b-x]] == ~zero )
  where stre1 = (Stream`{n}(Init key iv1)).0
        stre2 = (Stream`{n}(Init key iv2)).0

//Własność: Dla danej trójki (tekst jawny, szyfrogram, wektor IV) istnieje tylko jeden, pasujacy klucz
KeyReverse : {n} (n<100) => ([n],[n],[80],[80],[80]) -> Bit
property KeyReverse (plaintext,ciphertext,iv,key1,key2) = ((Encrypt plaintext (Init key1 iv )) == Encrypt plaintext ( Init key2 iv )) ==> (key1==key2)

